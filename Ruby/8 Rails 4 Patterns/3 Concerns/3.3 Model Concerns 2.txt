3.3 Model Concerns 2

We now have a new class method called with_no_reviews, and it looks pretty much the same for both models. Extract this method to the Reviewable concern, and make sure it's included inside of the inner module ClassMethods so that it's automatically detected by ActiveSupport::Concern.


item.rb
class Item < ActiveRecord::Base
  include Reviewable

  def self.with_no_reviews
    where('id NOT IN (SELECT DISTINCT(reviewable_id) FROM reviews WHERE reviewable_type = ?)', self.name)
  end
end


user.rb
class User < ActiveRecord::Base
  include Reviewable

  def self.with_no_reviews
    where('id NOT IN (SELECT DISTINCT(reviewable_id) FROM reviews WHERE reviewable_type = ?)', self.name)
  end
end


reviewable.rb
module Reviewable
  extend ActiveSupport::Concern

  included do
    has_many :reviews, as: :reviewable, dependent: :destroy
  end

  def reviews_rating
    (reviews.positive.count / reviews.approved.count.to_f).round(2)
  end
  
  module ClassMethods
  end
end


Answer:
reviewable.rb
module Reviewable
  extend ActiveSupport::Concern

  included do
    has_many :reviews, as: :reviewable, dependent: :destroy
  end

  def reviews_rating
    (reviews.positive.count / reviews.approved.count.to_f).round(2)
  end
  
  module ClassMethods
    def with_no_reviews
      where('id NOT IN (SELECT DISTINCT(reviewable_id) FROM reviews WHERE reviewable_type = ?)', name)
    end
  end
end