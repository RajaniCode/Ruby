4. Initializing Game Data


Now that we can add games to the library, we'll use the code in the block to set the game's details. Implement system and year methods in the Game class that store the data in instance variables, then use instance_eval to run the block in the context of the game object.


example.rb
add_game "Civilization" do
  system "PC"
  year 1991
end


library.rb
class Library
  def initialize
    @games = []
  end
 
  def add_game(game)
    @games << game
  end
end


game.rb
class Game
  attr_reader :name

  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end

  # Add methods to store year and system
end


game_dsl.rb
LIBRARY = Library.new

def add_game(name)
  game = Game.new(name)
  # Capture the block and call it here
  LIBRARY.add_game(game)
end


Answer:
game.rb
class Game
  attr_reader :name

  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end

  # Add methods to store year and system
  def system(name)
    @system = name
  end
  
  def year(value)
    @year = value
  end 
end

game_dsl.rb
LIBRARY = Library.new
def add_game(name, &block)
  game = Game.new(name)
  # Capture the block and call it here
  game.instance_eval(&block)
  LIBRARY.add_game(game)
end