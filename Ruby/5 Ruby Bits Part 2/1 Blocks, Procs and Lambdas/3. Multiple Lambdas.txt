3. Multiple Lambdas


Refactor exec_game to take a second Proc argument for error handling purposes. If calling the action Proc raises an exeption, call the new error Proc. We've already modified the code in main.rb to create the error Proc and pass it to exec_game. Hint: You'll want to add a begin/rescue/end block around action.call.


seed.rb
GAMES = [
  Game.new('Contra', year: 1987, system: 'NES'),
  Game.new('Civilization', year: 1991, system: 'PC'),
  Game.new('The Legend of Zelda', year: 1986, system: 'NES'),
  Game.new('Mega Man X2', year: 1995, system: 'SNES'),
  Game.new('Super Metroid', year: 1994, system: 'SNES'),
  Game.new('Sim City 2000', year: 1993, system: 'PC'),
  Game.new('Starcraft', year: 1998, system: 'PC')
]


main.rb
library = library.new(GAMES)
 
print_details = lambda do |game|
  puts "#{game.name} (#{game.system}) - #{game.year}"
end
 
error_handler = lambda do
  puts "Oh no, there was an error!"
end
 
library.exec_game("Contra", print_details, error_handler)


game.rb
class Game 
  attr_accessor :name

  def initialize(name, options)
    @name = name
    @year = options[:year]
    @system = options[:system]
  end
end


library.rb
class Library
  attr_accessor :games

  def initialize(games)
    @games = games
  end

  def exec_game(name, action)
    game = games.detect { |game| game.name == name }
    action.call(game)
  end
end


Answer:
library.rb
class Library
  attr_accessor :games

  def initialize(games)
    @games = games
  end

  def exec_game(name, action, error)    
    game = games.detect { |game| game.name == name }
    begin
      action.call(game)      
    rescue Exception => e
      error.call
    end     
  end
end