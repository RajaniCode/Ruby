3. Mocking


Update the spec so that whenever a tweet is created, we verify that email_tweeter is called on the tweet object.


models
# tweet.rb
class Tweet < ActiveRecord::Base
  belongs_to :zombie
  validates :message, presence: true
  attr_accessible :message
 
  after_create :email_tweeter
 
  def email_tweeter
    ZombieMailer.tweet(zombie, self).deliver
  end
  private :email_tweeter
end


zombie_mailer.rb
class ZombieMailer < ActionMailer::Base
  def tweet(zombie, tweet)
    mail(:from => 'admin@codeschool.com',
         :to => zombie.email,
         :subject => tweet.message)
  end
end


zombie_spec.rb
describe Tweet do
  context 'after create' do
    let(:zombie) { Zombie.create(email: 'anything@example.org') }
    let(:tweet) { zombie.tweets.new(message: 'Arrrrgggghhhh') }

    it 'calls "email_tweeter" on the tweet' do
      pending
      tweet.save
    end
  end
end


Answer:
zombie_spec.rb
describe Tweet do
  context 'after create' do
    let(:zombie) { Zombie.create(email: 'anything@example.org') }
    let(:tweet) { zombie.tweets.new(message: 'Arrrrgggghhhh') }

    it 'calls "email_tweeter" on the tweet' do
      tweet.should_receive(:email_tweeter)
      tweet.save
    end
  end
end