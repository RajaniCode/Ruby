3. Refactoring into Contexts


Notice how we have two expectations on a zombie object with a high iq. We should clean this up by creating a context for the high iq zombie and making that zombie the subject of that context. Next, refactor the two expectations to use the implicit subject that we learned about in the previous challenge.


zombie.rb
class Zombie < ActiveRecord::Base
  attr_accessible :iq
  validates :name, presence: true
 
  def genius?
    iq >= 3
  end
 
  def brains_eaten_count
    iq / 3
  end
end


zombie_spec.rb
describe Zombie do
  it { should_not be_genius }
  its(:iq) { should == 0 }

  it "should be_genius with high iq" do
    zombie = Zombie.new(iq: 3)
    zombie.should be_genius
  end

  it 'should have a brains_eaten_count of 1 with high iq' do
    zombie = Zombie.new(iq: 3)
    zombie.brains_eaten_count.should == 1
  end
end


Answer:
zombie_spec.rb
describe Zombie do
  it { should_not be_genius }
  its(:iq) { should == 0 }

  context "should be_genius with high iq" do
    subject {Zombie.new(iq: 3)}
    it {should be_genius}
  end

  context 'should have a brains_eaten_count of 1 with high iq' do
    subject {Zombie.new(iq: 3)}
    its(:brains_eaten_count) {should == 1}
  end
end
